import os
import logging
import random
from logging_utils import log_trade, analyze_position, save_feedback

strategy_name = os.path.basename(__file__)
symbol = "ETH/USDT"
position = None
entry_price = None

def initialize_strategy():
    logging.basicConfig(level=logging.INFO)
    logging.info(f"ðŸ“‰ Strategie {strategy_name} initialiseren (MACD Signal)")

def should_buy(macd, signal):
    return macd > signal

def should_sell(macd, signal):
    return macd < signal

def analyze_market():
    prijs = round(random.uniform(26000, 49000), 2)
    macd = random.uniform(-2, 2)
    signal = random.uniform(-2, 2)
    feedback = ""
    if should_buy(macd, signal):
        actie = "BUY"
        feedback = f"MACD Signal: MACD ({macd:.2f}) > Signaal ({signal:.2f}), koopmoment."
    elif should_sell(macd, signal):
        actie = "SELL"
        feedback = f"MACD Signal: MACD ({macd:.2f}) < Signaal ({signal:.2f}), verkoopmoment."
    else:
        actie = random.choice(["BUY", "SELL"])
        feedback = f"MACD Signal: MACD ({macd:.2f}) â‰ˆ Signaal ({signal:.2f}), geen duidelijk signaal."
    winst = round(random.uniform(-160, 200), 2)
    return {
        "actie": actie,
        "prijs": prijs,
        "winst": winst,
        "feedback": feedback
    }

def log_feedback(strategy_name, feedback):
    save_feedback(strategy_name, feedback)

def run_strategy():
    initialize_strategy()
    result = analyze_market()
    logging.info(f"ðŸ“Š MACD Signal trade: {result['actie']} @ ${result['prijs']} | Resultaat: {result['winst']}")
    log_trade(strategy_name, result['actie'], result['prijs'], result['winst'])
    analyze_position(symbol=symbol, price=result['prijs'], position=position, strategy=strategy_name)
    log_feedback(strategy_name, result['feedback'])